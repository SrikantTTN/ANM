package com.example.srikant.apishitting.home.java_model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Anganwadi".
*/
public class LocationDbModelDao extends AbstractDao<LocationDbModel, Long> {

    public static final String TABLENAME = "Anganwadi";

    /**
     * Properties of entity LocationDbModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StateId = new Property(0, Integer.class, "stateId", false, "STATE_ID");
        public final static Property StateName = new Property(1, String.class, "stateName", false, "STATE_NAME");
        public final static Property DistrictId = new Property(2, Integer.class, "districtId", false, "DISTRICT_ID");
        public final static Property DistrictName = new Property(3, String.class, "districtName", false, "DISTRICT_NAME");
        public final static Property TalukaId = new Property(4, Integer.class, "talukaId", false, "TALUKA_ID");
        public final static Property TalukaName = new Property(5, String.class, "talukaName", false, "TALUKA_NAME");
        public final static Property PhcId = new Property(6, Integer.class, "phcId", false, "PHC_ID");
        public final static Property PhcName = new Property(7, String.class, "phcName", false, "PHC_NAME");
        public final static Property SubCentreId = new Property(8, Integer.class, "subCentreId", false, "SUB_CENTRE_ID");
        public final static Property SubCentreName = new Property(9, String.class, "subCentreName", false, "SUB_CENTRE_NAME");
        public final static Property VillageId = new Property(10, Integer.class, "villageId", false, "VILLAGE_ID");
        public final static Property VillageName = new Property(11, String.class, "villageName", false, "VILLAGE_NAME");
        public final static Property AnganwadiId = new Property(12, Long.class, "anganwadiId", true, "_id");
        public final static Property AnganwadiName = new Property(13, String.class, "anganwadiName", false, "ANGANWADI_NAME");
    }


    public LocationDbModelDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDbModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Anganwadi\" (" + //
                "\"STATE_ID\" INTEGER," + // 0: stateId
                "\"STATE_NAME\" TEXT," + // 1: stateName
                "\"DISTRICT_ID\" INTEGER," + // 2: districtId
                "\"DISTRICT_NAME\" TEXT," + // 3: districtName
                "\"TALUKA_ID\" INTEGER," + // 4: talukaId
                "\"TALUKA_NAME\" TEXT," + // 5: talukaName
                "\"PHC_ID\" INTEGER," + // 6: phcId
                "\"PHC_NAME\" TEXT," + // 7: phcName
                "\"SUB_CENTRE_ID\" INTEGER," + // 8: subCentreId
                "\"SUB_CENTRE_NAME\" TEXT," + // 9: subCentreName
                "\"VILLAGE_ID\" INTEGER," + // 10: villageId
                "\"VILLAGE_NAME\" TEXT," + // 11: villageName
                "\"_id\" INTEGER PRIMARY KEY ," + // 12: anganwadiId
                "\"ANGANWADI_NAME\" TEXT);"); // 13: anganwadiName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Anganwadi\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationDbModel entity) {
        stmt.clearBindings();
 
        Integer stateId = entity.getStateId();
        if (stateId != null) {
            stmt.bindLong(1, stateId);
        }
 
        String stateName = entity.getStateName();
        if (stateName != null) {
            stmt.bindString(2, stateName);
        }
 
        Integer districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindLong(3, districtId);
        }
 
        String districtName = entity.getDistrictName();
        if (districtName != null) {
            stmt.bindString(4, districtName);
        }
 
        Integer talukaId = entity.getTalukaId();
        if (talukaId != null) {
            stmt.bindLong(5, talukaId);
        }
 
        String talukaName = entity.getTalukaName();
        if (talukaName != null) {
            stmt.bindString(6, talukaName);
        }
 
        Integer phcId = entity.getPhcId();
        if (phcId != null) {
            stmt.bindLong(7, phcId);
        }
 
        String phcName = entity.getPhcName();
        if (phcName != null) {
            stmt.bindString(8, phcName);
        }
 
        Integer subCentreId = entity.getSubCentreId();
        if (subCentreId != null) {
            stmt.bindLong(9, subCentreId);
        }
 
        String subCentreName = entity.getSubCentreName();
        if (subCentreName != null) {
            stmt.bindString(10, subCentreName);
        }
 
        Integer villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindLong(11, villageId);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(12, villageName);
        }
 
        Long anganwadiId = entity.getAnganwadiId();
        if (anganwadiId != null) {
            stmt.bindLong(13, anganwadiId);
        }
 
        String anganwadiName = entity.getAnganwadiName();
        if (anganwadiName != null) {
            stmt.bindString(14, anganwadiName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationDbModel entity) {
        stmt.clearBindings();
 
        Integer stateId = entity.getStateId();
        if (stateId != null) {
            stmt.bindLong(1, stateId);
        }
 
        String stateName = entity.getStateName();
        if (stateName != null) {
            stmt.bindString(2, stateName);
        }
 
        Integer districtId = entity.getDistrictId();
        if (districtId != null) {
            stmt.bindLong(3, districtId);
        }
 
        String districtName = entity.getDistrictName();
        if (districtName != null) {
            stmt.bindString(4, districtName);
        }
 
        Integer talukaId = entity.getTalukaId();
        if (talukaId != null) {
            stmt.bindLong(5, talukaId);
        }
 
        String talukaName = entity.getTalukaName();
        if (talukaName != null) {
            stmt.bindString(6, talukaName);
        }
 
        Integer phcId = entity.getPhcId();
        if (phcId != null) {
            stmt.bindLong(7, phcId);
        }
 
        String phcName = entity.getPhcName();
        if (phcName != null) {
            stmt.bindString(8, phcName);
        }
 
        Integer subCentreId = entity.getSubCentreId();
        if (subCentreId != null) {
            stmt.bindLong(9, subCentreId);
        }
 
        String subCentreName = entity.getSubCentreName();
        if (subCentreName != null) {
            stmt.bindString(10, subCentreName);
        }
 
        Integer villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindLong(11, villageId);
        }
 
        String villageName = entity.getVillageName();
        if (villageName != null) {
            stmt.bindString(12, villageName);
        }
 
        Long anganwadiId = entity.getAnganwadiId();
        if (anganwadiId != null) {
            stmt.bindLong(13, anganwadiId);
        }
 
        String anganwadiName = entity.getAnganwadiName();
        if (anganwadiName != null) {
            stmt.bindString(14, anganwadiName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12);
    }    

    @Override
    public LocationDbModel readEntity(Cursor cursor, int offset) {
        LocationDbModel entity = new LocationDbModel( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // stateId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stateName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // districtId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // districtName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // talukaId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // talukaName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // phcId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phcName
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // subCentreId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // subCentreName
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // villageId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // villageName
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // anganwadiId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // anganwadiName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationDbModel entity, int offset) {
        entity.setStateId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setStateName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistrictId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDistrictName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTalukaId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTalukaName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhcId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPhcName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubCentreId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSubCentreName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVillageId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setVillageName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAnganwadiId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setAnganwadiName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationDbModel entity, long rowId) {
        entity.setAnganwadiId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationDbModel entity) {
        if(entity != null) {
            return entity.getAnganwadiId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationDbModel entity) {
        return entity.getAnganwadiId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

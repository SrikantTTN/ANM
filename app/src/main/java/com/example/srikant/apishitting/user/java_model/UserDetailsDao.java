package com.example.srikant.apishitting.user.java_model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAILS".
*/
public class UserDetailsDao extends AbstractDao<UserDetails, Long> {

    public static final String TABLENAME = "USER_DETAILS";

    /**
     * Properties of entity UserDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProfileUrl = new Property(0, String.class, "profileUrl", false, "PROFILE_URL");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property PhoneNumber = new Property(3, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property AlternatePhoneNumber = new Property(5, String.class, "alternatePhoneNumber", false, "ALTERNATE_PHONE_NUMBER");
        public final static Property EmailId = new Property(6, String.class, "emailId", false, "EMAIL_ID");
        public final static Property Id = new Property(7, Long.class, "id", true, "_id");
        public final static Property UserType = new Property(8, String.class, "userType", false, "USER_TYPE");
    }


    public UserDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAILS\" (" + //
                "\"PROFILE_URL\" TEXT," + // 0: profileUrl
                "\"FIRST_NAME\" TEXT," + // 1: firstName
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"PHONE_NUMBER\" TEXT," + // 3: phoneNumber
                "\"GENDER\" TEXT," + // 4: gender
                "\"ALTERNATE_PHONE_NUMBER\" TEXT," + // 5: alternatePhoneNumber
                "\"EMAIL_ID\" TEXT," + // 6: emailId
                "\"_id\" INTEGER PRIMARY KEY ," + // 7: id
                "\"USER_TYPE\" TEXT);"); // 8: userType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(1, profileUrl);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String alternatePhoneNumber = entity.getAlternatePhoneNumber();
        if (alternatePhoneNumber != null) {
            stmt.bindString(6, alternatePhoneNumber);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(7, emailId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(9, userType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(1, profileUrl);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(4, phoneNumber);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String alternatePhoneNumber = entity.getAlternatePhoneNumber();
        if (alternatePhoneNumber != null) {
            stmt.bindString(6, alternatePhoneNumber);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(7, emailId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(9, userType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
    }    

    @Override
    public UserDetails readEntity(Cursor cursor, int offset) {
        UserDetails entity = new UserDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // profileUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // alternatePhoneNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // emailId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // userType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetails entity, int offset) {
        entity.setProfileUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlternatePhoneNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmailId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUserType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
